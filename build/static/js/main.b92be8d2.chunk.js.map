{"version":3,"sources":["serviceWorker.js","reducers/todos.js","reducers/cards.js","reducers/comment.js","reducers/reply.js","reducers/files.js","reducers/index.js","components/helpers/jwt.js","components/LoginPage.js","containers/CardStats.js","actions/card.js","containers/Card.js","components/SignupPage.js","components/ForgotPass.js","components/ResetPass.js","containers/Profile.js","actions/todo.js","actions/comment.js","actions/reply.js","actions/files.js","containers/Todolist.js","containers/AddTodo.js","containers/Stats.js","containers/Todo.js","components/Main.js","index.js"],"names":["Boolean","window","location","hostname","match","todos","copyList","action","type","slice","push","payload","cards","cardslist","comment","reply","files","combineReducers","getJwt","localStorage","getItem","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","LoginPage","props","userEmail","e","setState","email","target","value","userPass","password","submitData","preventDefault","clear","axios","post","state","then","config","data","swal","reactLocalStorage","set","token","isLoggedIn","catch","err","console","log","responseGoogle","response","tokenObj","imgUrl","profileObj","imageUrl","jwt","this","to","Container","component","maxWidth","CssBaseline","style","marginTop","display","flexDirection","alignItems","Avatar","margin","backgroundColor","onSubmit","noValidate","TextField","required","fullWidth","id","onChange","label","autoComplete","FormControlLabel","control","Checkbox","Button","Grid","container","item","xs","clientId","buttonText","onSuccess","onFailure","Box","mt","Component","useStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","avatar","red","title","breakpoints","up","inputRoot","sectionDesktop","sectionMobile","list","width","PrimarySearchAppBar","side","classes","React","useState","profile","setProfile","left","toggleDrawer","open","event","key","className","AppBar","position","Toolbar","IconButton","edge","aria-label","onClick","noWrap","Tooltip","loggedInUser","Drawer","onClose","role","onKeyDown","List","map","text","index","ListItem","button","remove","logout","drawerListClick","ListItemIcon","ListItemText","primary","card","App","dialog","setOpen","handleClose","addnewPro","nameProject","length","Axios","cardName","cardData","redirectToLogin","createdBy","cardTodos","clickedCardIndex","redirectToTodos","get","params","myArray","pathname","allCards","Card","marginBottom","height","cardId","CardHeader","creatorEmail","subheader","created_at","CardMedia","paddingTop","image","CardContent","background","total","countTotalCards","padding","borderRadius","flexWrap","Fab","bottom","right","Dialog","aria-labelledby","DialogTitle","DialogContent","autoFocus","DialogActions","connect","SignUp","firstName","lastName","myData","signup","googleSignUp","paddingBottom","sm","name","justify","ForgotPass","emailChange","emailSubmit","checkJwt","undefined","direction","minHeight","marginLeft","ResetPass","firstPass","secondPass","submitNew","queryString","parse","search","RegExp","test","passwordReset","linkExpiry","Profile","checkProfile","mainData","alt","src","toDateString","read","Todolist","editTodoInput","edit","updateId","delete","itemId","editSubmit","editItem","put","checkboxHandler","checked","obj","_","findWhere","parseInt","done","notesOpen","noteId","notes","notesClose","editNoteStatus","parentCommentId","noteSubmit","onChangeNote","note","login","fileSubmit","loading","formdata","FormData","success","i","append","error","userFiles","trial","commentData","replyData","dic","eachUserFiles","filter","each","todoId","String","eachTodoComment","defaultValue","DialogContentText","top","fileUpload","bind","fileType","justifyContent","fileLink","fileName","fontSize","cloudinaryLink","disabled","CircularProgress","size","Comment","Group","threaded","Header","as","dividing","commentId","Content","Author","Metadata","time","Text","replyf","Form","addreply","Input","onChangeReply","Actions","commentSubmit","onChangeComment","toLocaleString","redirectToProject","attachmentStatus","clickedCard","result","getTodosData","getUserFiles","Promise","all","result1","Fragment","labelId","tick","assignedBy","assignedByName","assignedTo","assignedToName","onKeyPress","dense","ListItemSecondaryAction","aria-describedby","CssTextField","withStyles","root","borderBottomColor","borderColor","margin1","margin2","AddTodo","setItem","emailValue","setEmailValue","dispatch","useDispatch","addNew","fullUserData","selector","useSelector","doneList","Badge","badgeContent","Todo","Main","path","exact","SignupPage","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b92be8d2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const todos = (todos = [], action) => {\n    let copyList;\n\n    switch (action.type) {\n        case \"Add\":\n            // console.log('me', action.payload)\n            copyList = todos.slice();\n            copyList.push(action.payload);\n            return copyList;\n        \n        case \"Read\":\n            // copyList = todos.slice();\n            // console.log(action.payload);\n            return action.payload;\n\n        default:\n            return todos;\n    }\n};\n\nexport default todos;\n","const cards = (cardslist = [], action) => {\n    switch (action.type) {\n        case \"card\":\n            return [...action.payload];\n\n        default:\n            return cardslist;\n    }\n};\n\nexport default cards;\n","const comment = (comment = [], action) => {\n    // let copyComment;\n    switch (action.type) {\n        case \"comment\":\n            // copyComment = comment.slice();\n            // copyComment.push(action.payload)\n            // comment = action.payload\n            return [...action.payload];\n\n        default:\n            return comment;\n    }\n};\n\nexport default comment;\n","const reply = (reply = [], action) => {\n    // let copyreply;\n    switch (action.type) {\n        case \"reply\":\n            // copyreply = reply.slice();\n            // copyreply.push(action.payload)\n            // reply = action.payload\n            return [...action.payload];\n\n        default:\n            return reply;\n    }\n};\n\nexport default reply;\n","const files = (files = [], action) => {\n    // let copyFiles;\n    switch (action.type) {\n        case \"files\":\n            // copyFiles = files.slice();\n            // copyFiles.push(action.payload)\n            // files = action.payload\n            return [...action.payload];\n\n        default:\n            return files;\n    }\n};\n\nexport default files;\n","import { combineReducers } from \"redux\";\nimport todos from \"./todos\";\nimport cards from \"./cards\";\nimport comment from './comment';\nimport reply from './reply';\nimport files from './files';\n\nexport default combineReducers({\n    todos,\n    cards,\n    comment,\n    reply,\n    files,\n});\n","export const getJwt = () => {\n    // console.log(localStorage.getItem('jwt'))\n    return localStorage.getItem('jwt');\n}","import React, { Component } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport axios from \"axios\";\nimport swal from \"sweetalert\";\nimport { GoogleLogin } from \"react-google-login\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport { Redirect, Link as RouterLink } from \"react-router-dom\";\nimport { getJwt } from \"./helpers/jwt\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {\"Copyright © \"}\n            <Link color=\"inherit\" href=\"https://github.com/yogendra3236/\">\n                Buddies Enterprises\n            </Link>{\" \"}\n            {new Date().getFullYear()}\n            {\".\"}\n        </Typography>\n    );\n}\n\nexport default class LoginPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n            jwt: null,\n            isLoggedIn: false\n        };\n    }\n\n    userEmail = e => {\n        // console.log(e.target.value);\n        this.setState({\n            email: e.target.value\n        });\n    };\n\n    userPass = e => {\n        // console.log(e.target.value);\n        this.setState({\n            password: e.target.value\n        });\n    };\n\n    submitData = e => {\n        e.preventDefault();\n        localStorage.clear(); // to clear the localStorage\n        // let {email, password} = this.state;\n        // console.log(email, password, this.state);\n\n        axios\n            .post(\"https://yogendra.ga:4000/login\", this.state)\n            .then(config => {\n                // console.log( 'power', config.data);\n                if (config.data === 'SequelizeUniqueConstraintError') {\n                    swal(\n                        \"Login Error\",\n                        \"Please enter a valid Email/Password or Sign up!\",\n                        \"error\"\n                    );\n                } else {\n                    reactLocalStorage.set(\"jwt\", config.data.token);\n                    this.setState({\n                        isLoggedIn: true\n                    });\n                }\n            })\n            .catch(err => console.log(\"yeh\", err));\n    };\n\n    responseGoogle = response => {\n        // console.log(response.tokenObj.id_token);\n        // let token = response.tokenObj.id_token;\n        // console.log(typeof(token));\n        // console.log(response);\n\n        axios\n            .post(\"https://yogendra.ga:4000/googleSignIn\", {\n                tokenObj: response.tokenObj,\n                imgUrl: response.profileObj.imageUrl\n            })\n            .then(config => {\n                // console.log('config', config.data);\n                if (config.data === 'SequelizeUniqueConstraintError') {\n                    swal(\n                        \"Login Error\",\n                        \"Please enter a valid Email/Password or Sign up!\",\n                        \"error\"\n                    );\n                } else {\n                    // console.log(config.data)\n                    reactLocalStorage.set(\"jwt\", config.data.token);\n                    this.setState({\n                        isLoggedIn: true\n                    });\n                }\n            })\n            .catch(err => console.log(err));\n    };\n\n    render() {\n        if (this.state.isLoggedIn) {\n            return <Redirect to=\"/project\" />;\n        }\n        if (getJwt()) {\n            return <Redirect to=\"/project\" />;\n        }\n        return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <div style={{marginTop: '30px', display: 'flex', flexDirection: 'column', alignItems: 'center'}} >\n                    <Avatar style={{margin: '0px', backgroundColor: 'red'}} >\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                    </Typography>\n                    <form onSubmit={this.submitData} noValidate>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            value={this.state.email}\n                            onChange={this.userEmail}\n                            label=\"Email Address\"\n                            autoComplete=\"email\"\n                            type=\"email\"\n                            // autoFocus\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            value={this.state.password}\n                            onChange={this.userPass}\n                            // name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            // autoFocus\n                            // autoComplete=\"current-password\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox value=\"remember\" color=\"primary\" />\n                            }\n                            label=\"Remember me\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            // className={classes.submit}\n                        >\n                            Sign In\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <RouterLink to=\"/forgotpass\" variant=\"body2\">\n                                    Forgot password?\n                                </RouterLink>\n                            </Grid>\n                            <Grid item>\n                                <RouterLink to=\"/signup\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </RouterLink>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n\n                <GoogleLogin\n                    clientId=\"536299356769-6revlp8ocmd1ffr53gm5knf1icsknh37.apps.googleusercontent.com\"\n                    buttonText=\"Login With Google\"\n                    onSuccess={this.responseGoogle}\n                    onFailure={this.responseGoogle}\n                />\n\n                <Box mt={2}>\n                    <Copyright />\n                </Box>\n            </Container>\n        );\n    }\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport { Redirect } from \"react-router-dom\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Avatar from \"@material-ui/core/Avatar\";\n// import { useSelector } from \"react-redux\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { red } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles(theme => ({\n    grow: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    avatar: {\n        backgroundColor: red[500]\n    },\n    title: {\n        display: \"none\",\n        [theme.breakpoints.up(\"sm\")]: {\n            display: \"block\"\n        }\n    },\n    inputRoot: {\n        color: \"inherit\"\n    },\n    sectionDesktop: {\n        display: \"none\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\"\n        }\n    },\n    sectionMobile: {\n        display: \"flex\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"none\"\n        }\n    },\n    list: {\n        width: 200\n    }\n}));\n\nexport default function PrimarySearchAppBar(props) {\n    const classes = useStyles();\n    const [profile, setProfile] = React.useState(false);\n    // const selector = useSelector(state => state.cards);\n    // console.log(selector);\n\n    const [state, setState] = React.useState({\n        left: false\n    });\n\n    const toggleDrawer = (side, open) => event => {\n        if (\n            event.type === \"keydown\" &&\n            (event.key === \"Tab\" || event.key === \"Shift\")\n        ) {\n            return;\n        }\n\n        setState({ ...state, [side]: open });\n    };\n\n    const drawerListClick = index => {\n        if (index === 0) {\n            setProfile(true);\n        } else {\n            reactLocalStorage.remove(\"jwt\");\n            props.logout();\n        }\n    };\n\n    const sideList = side => (\n        <div\n            className={classes.list}\n            role=\"presentation\"\n            onClick={toggleDrawer(side, false)}\n            onKeyDown={toggleDrawer(side, false)}\n        >\n            <List>\n                {[\"Profile\", \"Log Out\"].map((text, index) => (\n                    <ListItem\n                        button\n                        key={text}\n                        onClick={() => drawerListClick(index)}\n                    >\n                        <ListItemIcon>\n                            {index % 2 === 0 ? (\n                                <AccountCircleIcon />\n                            ) : (\n                                <ExitToAppIcon />\n                            )}\n                        </ListItemIcon>\n                        <ListItemText primary={text} />\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    );\n\n    let openprofile = () => {\n        console.log(\"openprofile function is called\");\n        setProfile(true);\n    };\n\n    if (profile) {\n        return <Redirect push to=\"/profile\" />;\n    }\n    return (\n        <div className={classes.grow}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={toggleDrawer(\"left\", true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        TodoApp- Projects\n                    </Typography>\n                    <div className={classes.grow} />\n                    <div className={classes.sectionDesktop}>\n                        <Tooltip title=\"Profile\">\n                            <IconButton\n                                color=\"inherit\"\n                                aria-label=\"open drawer\"\n                                onClick={openprofile}\n                            >\n                                <Avatar className={classes.avatar}>{props.loggedInUser[0]}</Avatar>\n                                {/* <AccountCircleIcon  /> */}\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </Toolbar>\n                <Drawer open={state.left} onClose={toggleDrawer(\"left\", false)}>\n                    {sideList(\"left\")}\n                </Drawer>\n            </AppBar>\n        </div>\n    );\n}\n","export function card(payload) {\n    return {\n        type: \"card\",\n        payload\n    };\n}\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Axios from \"axios\";\nimport { getJwt } from \"../components/helpers/jwt\";\nimport { Redirect } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport CardStats from \"./CardStats\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { red } from \"@material-ui/core/colors\";\nimport swal from \"sweetalert\";\nimport { connect } from \"react-redux\";\nimport { card } from \"../actions/card\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            setOpen: false,\n            nameProject: \"\",\n            redirectToTodos: false,\n            clickedCardIndex: null,\n            redirectToLogin: false,\n            loggedInUser: \"\"\n        };\n    }\n\n    UNSAFE_componentWillMount() {\n        // console.log(getJwt())\n        Axios.get(\"https://yogendra.ga:4000/allCards\", {\n            params: { token: getJwt() }\n        })\n            .then(cardData => {\n                if (cardData.data === \"token is not valid\") {\n                    reactLocalStorage.remove(\"jwt\");\n                    this.setState({\n                        redirectToLogin: true\n                    });\n                    return;\n                }\n\n                // console.log(cardData);\n                this.setState({\n                    loggedInUser: cardData.data.loggedInUser\n                });\n                this.props.card(cardData.data.myArray);\n            })\n            .catch(err => console.log(err));\n    }\n\n    dialog = () => {\n        // console.log('clicked!');\n        this.setState({\n            setOpen: true\n        });\n    };\n\n    handleClose = () => {\n        this.setState({\n            setOpen: false\n        });\n    };\n\n    addnewPro = () => {\n        if (this.state.nameProject.length === 0) {\n            return swal(\"Please Enter the name of the Project!\");\n        }\n        this.setState({\n            setOpen: false\n        });\n        Axios.post(\"https://yogendra.ga:4000/cards\", {\n            token: getJwt(),\n            cardName: this.state.nameProject\n        })\n            .then(cardData => {\n                if (cardData.data === \"token is not valid\") {\n                    reactLocalStorage.remove(\"jwt\");\n                    this.setState({\n                        redirectToLogin: true\n                    });\n                    return;\n                }\n                // console.log('card', cardData);\n                this.setState({\n                    loggedInUser: cardData.data[0].createdBy\n                });\n\n                this.props.card(cardData.data);\n            })\n            .catch(err => console.log(err));\n    };\n\n    cardTodos = index => {\n        // console.log(index);\n\n        this.setState({\n            clickedCardIndex: index,\n            redirectToTodos: true\n        });\n    };\n\n    logout = () => {\n        this.setState({\n            redirectToLogin: true\n        });\n    };\n\n    render() {\n        // console.log(this.state.allCards);\n\n        if (this.state.redirectToTodos) {\n            return (\n                <Redirect\n                    push\n                    to={{\n                        pathname: `/todo/${this.state.clickedCardIndex}`\n                    }}\n                />\n            );\n        }\n\n        if (this.state.redirectToLogin) {\n            return <Redirect to=\"/login\" />;\n        }\n\n        if (this.props.cards !== null) {\n            var allCards = this.props.cards.map(value => {\n                // console.log(value);\n                return (\n                    <Card\n                        style={{\n                            width: \"280px\",\n                            marginBottom: \"20px\",\n                            height: \"27vh\"\n                        }}\n                        key={value.cardId}\n                        onClick={() => this.cardTodos(value.cardId)}\n                    >\n                        <CardHeader\n                            avatar={\n                                <Avatar\n                                    aria-label=\"recipe\"\n                                    style={{ backgroundColor: red[500] }}\n                                >\n                                    {value.createdBy[0]}\n                                </Avatar>\n                            }\n                            title={`Created By-${value.createdBy} (${value.creatorEmail})`}\n                            subheader={value.created_at}\n                        />\n                        <CardMedia\n                            // className={classes.media}\n                            style={{\n                                height: 0,\n                                paddingTop: \"20px\"\n                            }}\n                            image=\"/static/images/cards/paella.jpg\"\n                            title={value.cardName}\n                        />\n                        <CardContent>\n                            <Typography\n                                variant=\"body2\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                            >\n                                Project Name - {value.cardName}\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                );\n            });\n        }\n        // console.log(this.state.allCards.length);\n        return (\n            <div style={{ background: \"skyBlue\", height: \"100vh\" }}>\n                <CardStats\n                    logout={this.logout}\n                    total={this.state.countTotalCards}\n                    loggedInUser={this.state.loggedInUser}\n                />\n                <div\n                    style={{\n                        padding: \"24px\",\n                        borderRadius: \"4px\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        width: \"500\",\n                        flexWrap: \"wrap\",\n                        background: \"skyBlue\"\n                    }}\n                >\n                    {allCards}\n                </div>\n\n                <Tooltip title=\"Add Project\" aria-label=\"add\">\n                    <Fab\n                        color=\"secondary\"\n                        style={{\n                            position: \"fixed\",\n                            bottom: \"70px\",\n                            right: \"20px\"\n                        }}\n                        onClick={this.dialog}\n                    >\n                        <AddIcon />\n                    </Fab>\n                </Tooltip>\n\n                <Dialog\n                    open={this.state.setOpen}\n                    onClose={this.handleClose}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        Add your Project Name\n                    </DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Project\"\n                            type=\"inherit\"\n                            onChange={e =>\n                                this.setState({ nameProject: e.target.value })\n                            }\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={this.addnewPro} color=\"primary\">\n                            Add\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        cards: state.cards\n    };\n};\n\nconst mapDispatchToProps = () => {\n    return {\n        card\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps()\n)(App);\n","import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { Link as RouterLink, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport swal from \"sweetalert\";\nimport { GoogleLogin } from \"react-google-login\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport { getJwt } from './helpers/jwt';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {\"Copyright © \"}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Buddies Enterprises\n            </Link>{\" \"}\n            {new Date().getFullYear()}\n            {\".\"}\n        </Typography>\n    );\n}\n\nexport default class SignUp extends React.Component {\n    //   const classes = useStyles();\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            password: \"\",\n            signup: false,\n            googleSignUp: false\n        };\n    }\n\n    firstName = e => {\n        //   console.log(e.target.value);\n        this.setState({\n            firstName: e.target.value\n        });\n    };\n\n    lastName = e => {\n        this.setState({\n            lastName: e.target.value\n        });\n    };\n\n    email = e => {\n        this.setState({\n            email: e.target.value\n        });\n    };\n\n    password = e => {\n        this.setState({\n            password: e.target.value\n        });\n    };\n\n    submitData = e => {\n        e.preventDefault();\n        let { firstName, lastName, email, password } = this.state;\n        // console.log(firstName, lastName, email, password);\n        let data = {\n            firstName: firstName,\n            lastName: lastName,\n            email: email,\n            password: password\n        };\n\n        axios\n            .post(\"https://yogendra.ga:4000/signup\", data)\n            .then(myData => {\n                // console.log(myData);\n                // console.log(data.data.length);\n                // console.log(myData.data.constructor === Array);\n                if (myData.data === \"SequelizeUniqueConstraintError\") {\n                    swal(\n                        \"Signup Error\",\n                        \"This email has already been used. Please Sign In\",\n                        \"error\"\n                    );\n                } else {\n                    this.setState({\n                        signup: true\n                    });\n                    swal(\"Signup Success\", \"Cool. Please Sign In\", \"success\");\n                }\n            })\n            .catch(err => console.log(err));\n    };\n\n    responseGoogle = response => {\n        // console.log(response);\n        // axios\n        //     .post(\"https://yogendra.ga:4000/googleSignUp\", response.profileObj)\n        //     .then(myData => {\n        //         console.log(myData);\n        //         // console.log(data.data.length);\n        //         // console.log(myData.data.constructor === Array);\n        //         if (myData.data.token !== null || myData.data.token !== undefined) {\n        //             reactLocalStorage.set(\"jwt\", myData.data.token);\n        //             this.setState({\n        //                 googleSignUp: true\n        //             });\n        //             // swal(\"Signup Success\", \"Cool. Please Sign In\", \"success\");\n        //         }\n        //     })\n        //     .catch(err => console.log(err));\n        axios\n            .post(\"https://yogendra.ga:4000/googleSignUp\", {\n                tokenObj: response.tokenObj,\n                imgUrl: response.profileObj.imageUrl\n            })\n            .then(config => {\n                // console.log('config', config.data);\n                if (config.data === 'SequelizeUniqueConstraintError') {\n                    swal(\n                        \"Login Error\",\n                        \"Please enter a valid Email/Password or Sign up!\",\n                        \"error\"\n                    );\n                } else {\n                    // console.log(config.data)\n                    reactLocalStorage.set(\"jwt\", config.data.token);\n                    this.setState({\n                        googleSignUp: true\n                    });\n                }\n            })\n            .catch(err => console.log(err));\n    };\n\n    render() {\n        if (this.state.signup) {\n            return <Redirect to=\"/login\" />;\n        }\n        if (this.state.googleSignUp) {\n            return <Redirect to=\"/project\" />;\n        }\n        if (getJwt()) {\n            return <Redirect to=\"/project\" />;\n        }\n        return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <div\n                    style={{\n                        marginTop: \"30px\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\"\n                    }}\n                >\n                    <Avatar style={{ margin: \"0px\", backgroundColor: \"red\" }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h5\"\n                        style={{ paddingBottom: \"20px\" }}\n                    >\n                        Sign up\n                    </Typography>\n                    <form onSubmit={this.submitData}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    autoComplete=\"fname\"\n                                    name=\"firstName\"\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    onChange={this.firstName}\n                                    // autoFocus\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    autoComplete=\"lname\"\n                                    onChange={this.lastName}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                    onChange={this.email}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    onChange={this.password}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            value=\"allowExtraEmails\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"I agree all the terms and conditions\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            // className={classes.submit}\n                        >\n                            Sign Up\n                        </Button>\n                        <Grid container justify=\"flex-end\">\n                            <Grid item>\n                                <RouterLink to=\"/login\" color=\"inherit\">\n                                    Already have an account? Sign in\n                                </RouterLink>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n                <GoogleLogin\n                    clientId=\"536299356769-6revlp8ocmd1ffr53gm5knf1icsknh37.apps.googleusercontent.com\"\n                    buttonText=\"Signup With Google\"\n                    onSuccess={this.responseGoogle}\n                    onFailure={this.responseGoogle}\n                />\n                <Box mt={5}>\n                    <Copyright />\n                </Box>\n            </Container>\n        );\n    }\n}\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport LoginPage from './LoginPage';\n\nexport default class ForgotPass extends React.Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             email: null,\n             checkJwt: false,\n        }\n    }\n\n    componentDidMount() {\n        let getJwt = reactLocalStorage.get('jwt');\n        // console.log(getJwt);\n        if (getJwt !== undefined) {\n            this.setState({\n                checkJwt: true,\n            })\n        }\n    }\n\n    emailChange = (e) => {\n        this.setState({\n            email: e.target.value,\n        })\n    }\n\n  emailSubmit = (e) => {\n      e.preventDefault()\n    //   console.log(this.state.email);\n      if (this.state.email !== null){\n        axios\n        .post('https://yogendra.ga:4000/forgot', {email: this.state.email})\n        .then(data => {\n            // console.log(data);\n            if (data.data.length === 0){\n                swal(\"Error\", \"This Email doesn't exist! Please Sign up!\", \"error\");\n            }\n            else {\n                swal(\"Awesome!\", \"A Password Reset link has been sent to your Email!\", \"success\");\n            }\n        })\n        .catch(err => console.log(err));\n      }\n      else {\n        swal(\"Error\", \"Please enter your Email!\", \"error\");\n      }\n  }\n  render(){\n\n    if (this.state.checkJwt){\n        return <LoginPage />\n    }\n    return (\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <Grid\n                container\n                // spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{ minHeight: '100vh'}}\n            >\n    \n                <Grid item xs={10}>\n                    <Card style={{ padding: '50px', marginLeft: 'auto' }}>\n                        <form onSubmit={this.emailSubmit}>\n                            <Typography variant=\"h6\" >\n                                Enter your email to Reset the Password\n                            </Typography>\n                                <TextField\n                                    id=\"outlined-email-input\"\n                                    label=\"Email\"\n                                    onChange={this.emailChange}\n                                    type=\"email\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    required\n                                />\n                                <br></br>\n                            <Button style={{color: 'Blue', background: 'skyBlue'}} onClick={this.emailSubmit}>Submit</Button>\n                        </form>\n                    </Card>\n                </Grid>      \n            </Grid>\n        </div>\n        );\n    }\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport swal from 'sweetalert';\nimport { Redirect } from 'react-router-dom';\n\nexport default class ResetPass extends React.Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            linkExpiry: false, \n            firstPass: '',\n            secondPass: '',\n            passwordReset: false,\n        }\n    }\n\n    componentDidMount(){\n        const value=queryString.parse(this.props.location.search);\n        const token=value.key;\n        axios.post('https://yogendra.ga:4000/resetpass', {token: token})\n        .then(config => {\n            if (config.data === false){\n                swal(\"Link Error\", \"This Link is expired!\", \"error\");\n                this.setState({\n                    linkExpiry: true,\n                })\n            }\n        })\n        .catch(err => console.log(err));\n    }\n    \n\n    firstPass = (e) => {\n        this.setState({\n            firstPass: e.target.value,\n        })\n    }\n\n    secondPass = (e) => {\n        this.setState({\n            secondPass: e.target.value,\n        })\n    }\n\n    submitNew = (e) => {\n        console.log('submitNew clicked!');\n        e.preventDefault();\n        const value=queryString.parse(this.props.location.search);\n        const token=value.key;\n        const { firstPass, secondPass } = this.state;\n\n        if (firstPass === secondPass){\n            const re = new RegExp(\"(?=.*?[0-9]).{8,}$\");\n            const isOk = re.test(firstPass);\n            // console.log(isOk);\n            if (!isOk){\n                swal(\"Wait!\", \"Your Password should be at least 8 letter long with numbers\", \"info\");\n                this.setState({\n                    firstPass: '',\n                    secondPass: '',\n                });\n                return;\n            }\n\n            axios.post('https://yogendra.ga:4000/submitNewPass', {token: token, password: firstPass})\n            .then(data => {\n                if (data.data){\n                    console.log('checkit');\n                    this.setState({\n                        firstPass: '',\n                        secondPass: '',\n                        passwordReset: true,\n                    });\n                    swal(\"Awesome!\", \"Your Password has been reset successfully!\", \"success\")\n                }\n                else {\n                    swal(\"Link Error\", \"This Link is expired!\", \"error\");\n                    this.setState({\n                        linkExpiry: true,\n                    })\n                }\n            })\n            .catch(err => console.log(err));\n        }else {\n            this.setState({\n                firstPass: '',\n                secondPass: '',\n            });\n\n            swal(\"Wait!\", \"Your passwords don't match!\", \"info\");\n        }\n    }\n\n  render(){\n\n    if (this.state.linkExpiry){\n        return <Redirect to=\"/forgotpass\" />\n    }\n\n    if (this.state.passwordReset){\n        return <Redirect to=\"/login\" />\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n          <CssBaseline />\n          <div style={{\n                marginTop: '50px',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}\n            >\n            <Typography component=\"h1\" variant=\"h5\">\n              Change Password\n            </Typography>\n            <form onSubmit={this.submitNew}>\n            <TextField\n                id=\"outlined-password-input\"\n                label=\"New Password\"\n                // className={classes.textField}\n                type=\"password\"\n                autoComplete=\"current-password\"\n                margin=\"normal\"\n                onChange={this.firstPass}\n                variant=\"outlined\"\n                value={this.state.firstPass}\n                fullWidth\n                required\n            />\n            <TextField\n                id=\"outlined-password-input2\"\n                label=\"Confirm Password\"\n                // className={classes.textField}\n                type=\"password\"\n                autoComplete=\"current-password\"\n                margin=\"normal\"\n                onChange={this.secondPass}\n                variant=\"outlined\"\n                value={this.state.secondPass}\n                fullWidth\n                required\n            />\n\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                // className={classes.submit}\n              >\n                Submit\n              </Button>\n            </form>\n          </div>\n          <Box mt={8}>\n            {/* <Copyright /> */}\n          </Box>\n        </Container>\n      );\n  }\n}","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport Grid from \"@material-ui/core/Grid\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default class Profile extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            avatar: null,\n            name: null,\n            email: null,\n            imgUrl: null,\n            checkProfile: false\n        };\n    }\n\n    componentDidMount() {\n        // console.log('this is me');\n        let jwt = reactLocalStorage.get(\"jwt\");\n        // console.log(jwt);\n        if (!jwt) {\n            this.setState({\n                checkProfile: true\n            });\n            return;\n        }\n        axios\n            .post(\"https://yogendra.ga:4000/profile\", { token: jwt })\n            .then(data => {\n                let mainData = data.data;\n                // console.log(mainData);\n                this.setState({\n                    avatar: mainData.avatar, // have not used yet\n                    name: mainData.name,\n                    email: mainData.email,\n                    imgUrl: mainData.imgUrl\n                });\n            })\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        if (this.state.checkProfile) {\n            return <Redirect to=\"/login\" />;\n        }\n        return (\n            <Grid\n                container\n                // spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{ minHeight: \"100vh\" }}\n            >\n                <Grid item xs={12}>\n                    <Card style={{ maxWidth: 305 }}>\n                        <CardHeader\n                            avatar={\n                                <Avatar\n                                    alt=\"Profile Picture\"\n                                    src={this.state.imgUrl}\n                                />\n                            }\n                            title={this.state.name}\n                            subheader={new Date().toDateString()}\n                        />\n                        <CardMedia\n                            src={this.state.imgUrl}\n                            image=\"Profile Image\"\n                            title=\"Avatar\"\n                        />\n                        <CardContent>\n                            <Typography\n                                variant=\"h6\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                            >\n                                Email <br></br>\n                            </Typography>\n                            {this.state.email}\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n","export function addTodo(payload) {\n    return {\n        type: 'Add',\n        payload\n    }\n}\n\nexport function read(payload) {\n    return {\n        type: 'Read',\n        payload\n    }\n}\n","export function comment(payload) {\n    return {\n        type: \"comment\",\n        payload\n    };\n}\n","export function reply(payload) {\n    return {\n        type: \"reply\",\n        payload\n    };\n}\n","export function files(payload) {\n    return {\n        type: \"files\",\n        payload\n    };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { read } from \"../actions/todo\";\nimport { comment } from \"../actions/comment\";\nimport { reply } from \"../actions/reply\";\nimport { files } from \"../actions/files\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport axios from \"axios\";\nimport { getJwt } from \"../components/helpers/jwt\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport swal from \"sweetalert\";\nimport {\n    Card,\n    CardHeader,\n    Avatar,\n    Tooltip,\n    DialogActions,\n    CardContent\n} from \"@material-ui/core\";\nimport _ from \"underscore\";\nimport { Redirect } from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { DropzoneArea } from \"material-ui-dropzone\";\nimport Button from \"@material-ui/core/Button\";\nimport FormData from \"form-data\";\nimport {\n    Button as SemanticButton,\n    Comment,\n    Header,\n    Form\n} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport Link from \"@material-ui/core/Link\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nclass Todolist extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login: false,\n            redirectToProject: false,\n            edit: false,\n            updateId: null,\n            editItem: \"\",\n            checked: false,\n            notes: false,\n            noteId: null,\n            onChangeNote: \"\",\n            editNoteStatus: false,\n            attachmentStatus: false,\n            files: [],\n            // userFiles: [],\n            onChangeComment: \"\",\n            onChangeReply: \"\",\n            // commentData: [],\n            parentCommentId: null,\n            // replyData: [],\n            loading: false,\n            success: true\n        };\n    }\n\n    componentDidUpdate() {\n        if (!getJwt()) {\n            // console.log(\"expired\");\n            this.setState({\n                login: true\n            });\n            reactLocalStorage.remove(\"jwt\", \"\");\n            return;\n        }\n        axios\n            .get(\"https://yogendra.ga:4000/get\", {\n                params: {\n                    token: getJwt(),\n                    clickedCardIndex: this.props.clickedCard\n                }\n            })\n            .then(result => {\n                if (result.data === \"token is not valid\") {\n                    reactLocalStorage.remove(\"jwt\");\n                    this.setState({\n                        login: true\n                    });\n                    return;\n                }\n\n                if (result.data === \"Invalid Card\") {\n                    swal(\"Wrong Project Id\");\n                    this.setState({\n                        redirectToProject: true\n                    });\n                    return;\n                }\n            });\n    }\n\n    componentDidMount() {\n        // console.log(this.props);\n        if (!getJwt()) {\n            // console.log(\"expired\");\n            this.setState({\n                login: true\n            });\n            reactLocalStorage.remove(\"jwt\", \"\");\n            return;\n        }\n\n        let cardId = this.props.clickedCard;\n        // console.log(\"ben 10\", cardId);\n\n        this.setState({\n            clickedCardIndex: cardId\n        });\n\n        let getTodosData = axios.get(\"https://yogendra.ga:4000/get\", {\n            params: { token: getJwt(), clickedCardIndex: cardId }\n        });\n\n        let getUserFiles = axios.get(\"https://yogendra.ga:4000/allfiles\", {\n            params: { token: getJwt() }\n        });\n\n        let commentData = axios.get(\"https://yogendra.ga:4000/allcomments\", {\n            params: { token: getJwt() }\n        });\n\n        let replyData = axios.get(\"https://yogendra.ga:4000/allreplies\", {\n            params: { token: getJwt() }\n        });\n\n        Promise.all([getTodosData, getUserFiles, commentData, replyData])\n            .then(result => {\n                // console.log(\"result\", result[0]);\n                let result1 = result[0];\n                let userFiles = result[1].data.userFiles;\n                let commentData = result[2].data;\n                let replyData = result[3].data;\n                // console.log(replyData);\n                // console.log(userFiles);\n\n                if (result1.data === \"token is not valid\") {\n                    reactLocalStorage.remove(\"jwt\");\n                    this.setState({\n                        login: true\n                    });\n                    return;\n                }\n\n                if (result1.data === \"Invalid Card\") {\n                    swal(\"Wrong Project Id\");\n                    this.setState({\n                        redirectToProject: true\n                    });\n                    return;\n                }\n                let data = result1.data.data;\n                this.props.read(data);\n                this.props.comment(commentData);\n                this.props.reply(replyData);\n                this.props.files(userFiles);\n            })\n            .catch(err => console.log(err));\n    }\n\n    editTodoInput = index => {\n        this.setState({\n            edit: true,\n            updateId: index\n        });\n    };\n\n    delete = itemId => {\n        axios\n            .delete(\"https://yogendra.ga:4000/delete/\" + itemId, {\n                data: {\n                    token: getJwt(),\n                    clickedCardIndex: this.state.clickedCardIndex\n                }\n            })\n            .then(response => {\n                this.props.read(response.data);\n                // console.log(response.data);\n            })\n            .catch(err => console.log(err));\n    };\n\n    editSubmit = e => {\n        // console.log(e.key);\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            let { updateId, clickedCardIndex } = this.state;\n            // console.log(this.state);\n            if (this.state.editItem.length !== 0) {\n                if (updateId !== null) {\n                    axios\n                        .put(\"https://yogendra.ga:4000/update/\" + updateId, {\n                            editItem: this.state.editItem,\n                            token: getJwt(),\n                            clickedCardIndex: clickedCardIndex\n                        })\n                        .then(response => {\n                            // console.log('updated!');\n                            // console.log('response', response);\n                            this.setState({\n                                // list: response.data,\n                                updateId: null\n                            });\n                            this.props.read(response.data);\n                        })\n                        .catch(err => console.log(err));\n                }\n            } else this.setState({ updateId: null });\n        }\n    };\n\n    checkboxHandler = e => {\n        // console.log('this method is working now!',e.target);\n        // this.setState({checked: e.target.checked});\n        var { list } = this.props;\n        var { id, checked } = e.target;\n        var { clickedCardIndex } = this.state;\n\n        // console.log(id, checked);\n        var obj = _.findWhere(list, { id: parseInt(id) });\n        // console.log(obj);\n        obj.done = checked; // to set checked if uncheck and vice-versa\n\n        axios\n            .put(\"https://yogendra.ga:4000/checkbox\", {\n                done: obj.done,\n                id: id,\n                token: getJwt(),\n                clickedCardIndex: clickedCardIndex\n            })\n            .then(response => {\n                // console.log(response.data);\n\n                this.props.read(response.data);\n            })\n            .catch(err => console.log(\"error updating value\", err));\n    };\n\n    notesOpen = noteId => {\n        this.setState({\n            notes: true,\n            noteId: noteId\n        });\n    };\n\n    notesClose = () => {\n        this.setState({\n            notes: false,\n            editNoteStatus: false,\n            parentCommentId: null\n        });\n    };\n\n    noteSubmit = e => {\n        e.preventDefault();\n\n        let { noteId, onChangeNote, clickedCardIndex } = this.state;\n        axios\n            .post(\"https://yogendra.ga:4000/notes\", {\n                token: getJwt(),\n                noteId: noteId,\n                note: onChangeNote,\n                clickedCardIndex: clickedCardIndex\n            })\n            .then(response => {\n                // console.log(response);\n                if (response.data === \"token is not valid\") {\n                    this.setState({\n                        login: true\n                    });\n                    return;\n                }\n                this.props.read(response.data);\n            })\n            .catch(err => console.log(err));\n\n        this.setState({\n            editNoteStatus: false\n        });\n    };\n\n    fileUpload(files) {\n        this.setState({\n            files: files\n        });\n    }\n\n    fileSubmit = () => {\n        let { noteId, files, loading } = this.state;\n        let formdata = new FormData();\n        // console.log(files[0]);\n        // data.append('file', data)\n        if (files.length !== 0) {\n            if (!loading) {\n                this.setState({\n                    loading: true,\n                    success: false\n                });\n            }\n            // console.log(files);\n            for (var i = 0; i < files.length; i++) {\n                // console.log(files[i]);\n                formdata.append(\"files\", files[i], files[i].name);\n            }\n\n            formdata.append(\"token\", getJwt());\n            formdata.append(\"todoId\", noteId);\n\n            // console.log(...formdata);\n            axios\n                .post(\"https://yogendra.ga:4000/files\", formdata)\n                .then(response => {\n                    if (\n                        response.data.error === \"Error: Images And PDFs Only!\"\n                    ) {\n                        swal(\n                            \"Upload Error!\",\n                            \"This media file is not supported!\",\n                            \"error\"\n                        );\n                        return;\n                    }\n                    let { userFiles } = response.data;\n                    this.setState({\n                        // userFiles: response.data.userFiles,\n                        notes: false,\n                        files: []\n                    });\n                    this.props.files(userFiles);\n                    this.setState({\n                        loading: false,\n                        success: true\n                    })\n\n                    swal(\"Perfect!\", \"Attachment Added!\", \"success\");\n                })\n                .catch(err => console.log(err));\n\n            // this.setState({\n            //     notes: false\n            // });\n        } else {\n            swal(\"Upload Error!\", \"Add atlease one file\", \"info\");\n        }\n    };\n\n    trial = () => {\n        let { noteId } = this.state; // from State\n        let { list, commentData, replyData, userFiles } = this.props; // from Redux-Store\n\n        var dic = _.findWhere(list, { id: noteId });\n\n        // console.log(eachUserFiles);\n\n        // console.log(commentData, noteId)\n        if (commentData !== null && userFiles !== null) {\n            var eachUserFiles = userFiles.filter(\n                each => each.todoId === String(noteId)\n            );\n            // console.log('each', eachUserFiles);\n\n            var eachTodoComment = commentData.filter(each => {\n                return each.todoId === String(noteId);\n            });\n        }\n\n        if (dic !== undefined) {\n            if (this.state.editNoteStatus) {\n                return (\n                    <form onSubmit={this.noteSubmit}>\n                        <TextField\n                            id=\"outlined-text-input\"\n                            label=\"Description\"\n                            fullWidth\n                            onChange={e =>\n                                this.setState({\n                                    onChangeNote: e.target.value\n                                })\n                            }\n                            defaultValue={dic.note}\n                            type=\"text\"\n                            name=\"text\"\n                            autoComplete=\"text\"\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                    </form>\n                );\n            }\n\n            return (\n                <div>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {/* Let Google help apps determine location. This means sending\n                        anonymous location data to Google, even when no apps are\n                        running. */}\n                        {dic.note || \"You don't have any description\"}\n                    </DialogContentText>\n                    <DialogActions>\n                        <Fab\n                            color=\"secondary\"\n                            aria-label=\"edit\"\n                            // className={classes.fab}\n                            onClick={() => {\n                                this.setState({\n                                    editNoteStatus: true\n                                });\n                            }}\n                            style={{ position: \"relative\", top: \"-50px\" }}\n                        >\n                            <EditIcon />\n                        </Fab>\n                    </DialogActions>\n                    <DropzoneArea\n                        onChange={this.fileUpload.bind(this)}\n                        name=\"files\"\n                    />\n                    <Card>\n                        <CardHeader title=\"All Media\" />\n                        <CardContent>\n                            {eachUserFiles.map((each, index) => {\n                                if (\n                                    each.fileType === \"img\" ||\n                                    each.fileType === \"png\" ||\n                                    each.fileType === \"jpg\" ||\n                                    each.fileType === \"jpeg\"\n                                ) {\n                                    return (\n                                        <div\n                                            key={index}\n                                            style={{\n                                                display: \"flex\",\n                                                justifyContent: \"space-between\",\n                                                marginTop: \"10px\"\n                                            }}\n                                        >\n                                            <div\n                                                style={{\n                                                    display: \"flex\",\n                                                    justifyContent:\n                                                        \"flex-start\",\n                                                    marginTop: \"30px\"\n                                                }}\n                                            >\n                                                <img\n                                                    src={each.fileLink}\n                                                    alt=\"new\"\n                                                    width=\"50px\"\n                                                    height=\"50px\"\n                                                />\n                                                <ol>{each.fileName}</ol>\n                                            </div>\n                                            <div\n                                                style={{\n                                                    marginTop: \"50px\",\n                                                    height: \"40px\"\n                                                }}\n                                            >\n                                                <Link\n                                                    href={each.fileLink}\n                                                    target=\"_blank\"\n                                                >\n                                                    {\" \"}\n                                                    <GetAppIcon fontSize=\"large\" />\n                                                </Link>\n                                            </div>\n                                        </div>\n                                    );\n                                } else if (each.fileType === \"pdf\") {\n                                    return (\n                                        <div\n                                            key={index}\n                                            style={{\n                                                display: \"flex\",\n                                                justifyContent: \"space-between\",\n                                                marginTop: \"10px\"\n                                            }}\n                                        >\n                                            <div\n                                                key={index}\n                                                style={{\n                                                    display: \"flex\",\n                                                    justifyContent:\n                                                        \"flex-start\",\n                                                    marginTop: \"30px\"\n                                                }}\n                                            >\n                                                <img\n                                                    src={each.cloudinaryLink || 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSf0AhnipvLA2o-fdwUrK9QQ56__Eh0RWAv4LRceY9JC0pmhnMD'}\n                                                    alt=\"new\"\n                                                    width=\"50px\"\n                                                    height=\"50px\"\n                                                />\n                                                <ol>{each.fileName}</ol>\n                                            </div>\n                                            <div style={{ marginTop: \"50px\" }}>\n                                                <Link\n                                                    href={each.fileLink}\n                                                    target=\"_blank\"\n                                                >\n                                                    {\" \"}\n                                                    <GetAppIcon fontSize=\"large\" />\n                                                </Link>\n                                            </div>\n                                        </div>\n                                    );\n                                }\n                                return null;\n                            })}\n                        </CardContent>\n                    </Card>\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                        <div style={{ position: \"relative\", margin: \"20px\" }}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={this.state.loading}\n                                onClick={this.fileSubmit}\n                            >\n                                Upload\n                            </Button>\n                            {this.state.loading && (\n                                <CircularProgress\n                                    size={24}\n                                    style={{\n                                        position: \"absolute\",\n                                        top: \"21%\",\n                                        left: \"38%\",\n                                        marginTop: \"-12\",\n                                        marginLeft: \"-12\"\n                                    }}\n                                />\n                            )}\n                        </div>\n                    </div>\n                    <Card style={{ marginTop: \"20px\" }}>\n                        {/* <CardHeader title=\"All Comments\" /> */}\n                        <CardContent>\n                            <Comment.Group threaded>\n                                <Header as=\"h3\" dividing>\n                                    Comments\n                                </Header>\n                                {eachTodoComment.map((comment, index) => {\n                                    let commentId = comment.commentId;\n                                    if (\n                                        comment.commentId ===\n                                        this.state.parentCommentId\n                                    ) {\n                                        return (\n                                            <Comment key={index}>\n                                                <Comment.Avatar\n                                                    as=\"a\"\n                                                    src=\"https://react.semantic-ui.com/images/avatar/small/matt.jpg\"\n                                                />\n                                                <Comment.Content>\n                                                    <Comment.Author as=\"a\">\n                                                        {comment.firstName}\n                                                    </Comment.Author>\n                                                    <Comment.Metadata>\n                                                        <span>\n                                                            {comment.time}\n                                                        </span>\n                                                    </Comment.Metadata>\n                                                    <Comment.Text>\n                                                        {comment.comment}\n                                                    </Comment.Text>\n                                                    <Comment.Group>\n                                                        {replyData\n                                                            .filter(replyf => {\n                                                                return (\n                                                                    replyf.commentId ===\n                                                                    String(\n                                                                        commentId\n                                                                    )\n                                                                );\n                                                            })\n                                                            .map(\n                                                                (\n                                                                    reply,\n                                                                    index\n                                                                ) => {\n                                                                    return (\n                                                                        <Comment\n                                                                            key={\n                                                                                index\n                                                                            }\n                                                                        >\n                                                                            <Comment.Avatar\n                                                                                as=\"a\"\n                                                                                src=\"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\"\n                                                                            />\n                                                                            <Comment.Content>\n                                                                                <Comment.Author as=\"a\">\n                                                                                    {\n                                                                                        reply.firstName\n                                                                                    }\n                                                                                </Comment.Author>\n                                                                                <Comment.Metadata>\n                                                                                    <span>\n                                                                                        {\n                                                                                            reply.time\n                                                                                        }\n                                                                                    </span>\n                                                                                </Comment.Metadata>\n                                                                                <Comment.Text>\n                                                                                    {\n                                                                                        reply.reply\n                                                                                    }\n                                                                                </Comment.Text>\n                                                                            </Comment.Content>\n                                                                        </Comment>\n                                                                    );\n                                                                }\n                                                            )}\n                                                    </Comment.Group>\n                                                    <Form\n                                                        reply\n                                                        onSubmit={this.addreply}\n                                                    >\n                                                        <Form.Input\n                                                            onChange={e =>\n                                                                this.setState({\n                                                                    onChangeReply:\n                                                                        e.target\n                                                                            .value\n                                                                })\n                                                            }\n                                                            autoFocus\n                                                            label=\"Add Reply\"\n                                                            value={\n                                                                this.state\n                                                                    .onChangeReply\n                                                            }\n                                                        />\n                                                    </Form>\n                                                </Comment.Content>\n                                            </Comment>\n                                        );\n                                    }\n                                    return (\n                                        <Comment key={index}>\n                                            <Comment.Avatar\n                                                as=\"a\"\n                                                src=\"https://react.semantic-ui.com/images/avatar/small/matt.jpg\"\n                                            />\n                                            <Comment.Content>\n                                                <Comment.Author as=\"a\">\n                                                    {comment.firstName}\n                                                </Comment.Author>\n                                                <Comment.Metadata>\n                                                    <span>{comment.time}</span>\n                                                </Comment.Metadata>\n                                                <Comment.Text>\n                                                    {comment.comment}\n                                                </Comment.Text>\n\n                                                <Comment.Group>\n                                                    {replyData\n                                                        .filter(replyf => {\n                                                            return (\n                                                                replyf.commentId ===\n                                                                String(\n                                                                    commentId\n                                                                )\n                                                            );\n                                                        })\n                                                        .map((reply, index) => {\n                                                            return (\n                                                                <Comment\n                                                                    key={index}\n                                                                >\n                                                                    <Comment.Avatar\n                                                                        as=\"a\"\n                                                                        src=\"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\"\n                                                                    />\n                                                                    <Comment.Content>\n                                                                        <Comment.Author as=\"a\">\n                                                                            {\n                                                                                reply.firstName\n                                                                            }\n                                                                        </Comment.Author>\n                                                                        <Comment.Metadata>\n                                                                            <span>\n                                                                                {\n                                                                                    reply.time\n                                                                                }\n                                                                            </span>\n                                                                        </Comment.Metadata>\n                                                                        <Comment.Text>\n                                                                            {\n                                                                                reply.reply\n                                                                            }\n                                                                        </Comment.Text>\n                                                                    </Comment.Content>\n                                                                </Comment>\n                                                            );\n                                                        })}\n                                                </Comment.Group>\n\n                                                <Comment.Actions>\n                                                    <SemanticButton\n                                                        onClick={() =>\n                                                            this.setState({\n                                                                parentCommentId: commentId\n                                                            })\n                                                        }\n                                                    >\n                                                        Reply\n                                                    </SemanticButton>\n                                                </Comment.Actions>\n                                            </Comment.Content>\n                                        </Comment>\n                                    );\n                                })}\n                            </Comment.Group>\n\n                            <form onSubmit={this.commentSubmit}>\n                                <TextField\n                                    id=\"outlined-text-input\"\n                                    label=\"Add Comment\"\n                                    fullWidth\n                                    onChange={e =>\n                                        this.setState({\n                                            onChangeComment: e.target.value\n                                        })\n                                    }\n                                    value={this.state.onChangeComment}\n                                    type=\"text\"\n                                    name=\"text\"\n                                    autoComplete=\"text\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                />\n                            </form>\n                        </CardContent>\n                    </Card>\n                </div>\n            );\n        }\n    };\n\n    addreply = e => {\n        e.preventDefault();\n        if (this.state.onChangeReply.length !== 0) {\n            let { parentCommentId, noteId, onChangeReply } = this.state;\n            axios\n                .post(\"https://yogendra.ga:4000/addreply\", {\n                    token: getJwt(),\n                    parentCommentId: parentCommentId,\n                    todoId: noteId,\n                    reply: onChangeReply,\n                    time: new Date().toLocaleString()\n                })\n                .then(response => {\n                    let replyData = response.data;\n                    this.setState({\n                        // replyData: replyData,\n                        onChangeReply: \"\",\n                        parentCommentId: null\n                    });\n                    this.props.reply(replyData);\n                })\n                .catch(err => console.log(err));\n        } else {\n            swal(\"Input Please\", \"Please add a Reply!\", \"info\");\n        }\n    };\n\n    commentSubmit = e => {\n        e.preventDefault();\n        if (this.state.onChangeComment.length !== 0) {\n            let { noteId, onChangeComment } = this.state;\n            axios\n                .post(\"https://yogendra.ga:4000/postcomment\", {\n                    token: getJwt(),\n                    todoId: noteId,\n                    comment: onChangeComment,\n                    time: new Date().toLocaleString()\n                })\n                .then(response => {\n                    let commentData = response.data;\n                    // console.log(commentData);\n                    this.setState({\n                        // commentData: commentData,\n                        onChangeComment: \"\"\n                    });\n                    this.props.comment(commentData);\n                })\n                .catch(err => console.log(err));\n        } else {\n            swal(\"Input Please\", \"Please add a Comment!\", \"info\");\n        }\n    };\n\n    render() {\n        // let list = useSelector(state => state);\n        // let dispatch = useDispatch();\n        let list = this.props.list;\n        // console.log(list);\n\n        if (this.state.login) {\n            return <Redirect to=\"/login\" />;\n        }\n        if (this.state.redirectToProject) {\n            return <Redirect to=\"/project\" />;\n        }\n\n        return (\n            <React.Fragment>\n                <List>\n                    {list.map(value => {\n                        const labelId = String(value.id);\n\n                        // to give the boolean value to checkbox\n                        let tick = value.done ? true : false;\n                        // console.log(tick);\n\n                        if (\n                            this.state.edit &&\n                            this.state.updateId === value.id\n                        ) {\n                            return (\n                                <Card\n                                    key={value.id}\n                                    style={{ margin: 16, padding: 10 }}\n                                >\n                                    <ListItem\n                                        style={{\n                                            backgroundColor: \"black\",\n                                            color: \"white\"\n                                        }}\n                                    >\n                                        <Avatar\n                                            alt=\"Remy Sharp\"\n                                            src=\"https://www.searchpng.com/wp-content/uploads/2019/02/Profile-ICon.png\"\n                                        />\n                                        <Tooltip title={value.assignedBy}>\n                                            <ListItemText>\n                                                Assigned By:{\" \"}\n                                                {value.assignedByName}\n                                            </ListItemText>\n                                        </Tooltip>\n                                        <Avatar\n                                            alt=\"Remy Sharp\"\n                                            src=\"https://www.searchpng.com/wp-content/uploads/2019/02/Profile-ICon.png\"\n                                        />\n\n                                        <Tooltip title={value.assignedTo}>\n                                            <ListItemText>\n                                                Assigned To:{\" \"}\n                                                {value.assignedToName}\n                                            </ListItemText>\n                                        </Tooltip>\n                                    </ListItem>\n                                    <ListItem\n                                        key={value.id}\n                                        style={{\n                                            backgroundColor: \"skyBlue\",\n                                            marginBottom: \"10px\"\n                                        }}\n                                    >\n                                        <ListItemIcon>\n                                            <Checkbox\n                                                onChange={this.checkboxHandler}\n                                                id={labelId}\n                                                checked={tick}\n                                            />\n                                        </ListItemIcon>\n                                        <form\n                                            onSubmit={this.editSubmit}\n                                            noValidate\n                                        >\n                                            <TextField\n                                                type=\"text\"\n                                                label=\"Edit Todo\"\n                                                onChange={e =>\n                                                    this.setState({\n                                                        editItem: e.target.value\n                                                    })\n                                                }\n                                                onKeyPress={this.editSubmit}\n                                                id=\"update\"\n                                                defaultValue={value.item}\n                                                fullWidth\n                                            />\n                                        </form>\n                                    </ListItem>\n                                </Card>\n                            );\n                        } else {\n                            return (\n                                <Card\n                                    key={value.id}\n                                    style={{ margin: 16, padding: 10 }}\n                                >\n                                    <ListItem\n                                        style={{\n                                            backgroundColor: \"black\",\n                                            color: \"white\"\n                                        }}\n                                    >\n                                        <Avatar\n                                            alt=\"Remy Sharp\"\n                                            src=\"https://www.searchpng.com/wp-content/uploads/2019/02/Profile-ICon.png\"\n                                        />\n                                        <Tooltip title={value.assignedBy}>\n                                            <ListItemText>\n                                                By: {value.assignedByName}\n                                            </ListItemText>\n                                        </Tooltip>\n                                        <Avatar\n                                            alt=\"Remy Sharp\"\n                                            src=\"https://www.searchpng.com/wp-content/uploads/2019/02/Profile-ICon.png\"\n                                        />\n                                        <Tooltip title={value.assignedTo}>\n                                            <ListItemText>\n                                                To: {value.assignedToName}\n                                            </ListItemText>\n                                        </Tooltip>\n                                    </ListItem>\n                                    <ListItem\n                                        key={value.id}\n                                        dense\n                                        button\n                                        onClick={() => this.notesOpen(value.id)}\n                                        style={{\n                                            backgroundColor: \"skyBlue\",\n                                            marginBottom: \"10px\"\n                                        }}\n                                    >\n                                        <ListItemIcon>\n                                            <Checkbox\n                                                onChange={this.checkboxHandler}\n                                                id={labelId}\n                                                checked={tick}\n                                            />\n                                        </ListItemIcon>\n                                        <ListItemText primary={value.item} />\n                                        <ListItemSecondaryAction>\n                                            <Tooltip title=\"Edit\">\n                                                <IconButton\n                                                    edge=\"end\"\n                                                    aria-label=\"delete\"\n                                                    onClick={() =>\n                                                        this.editTodoInput(\n                                                            value.id\n                                                        )\n                                                    }\n                                                    style={{\n                                                        marginRight: \"0px\"\n                                                    }}\n                                                    id=\"edit\"\n                                                >\n                                                    <EditIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                            <Tooltip title=\"Delete\">\n                                                <IconButton\n                                                    edge=\"end\"\n                                                    aria-label=\"delete\"\n                                                    onClick={() =>\n                                                        this.delete(value.id)\n                                                    }\n                                                    id=\"delete\"\n                                                    color=\"primary\"\n                                                >\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </Card>\n                            );\n                        }\n                    })}\n                </List>\n\n                <Dialog\n                    fullWidth\n                    // maxWidth={\"md\"}\n                    open={this.state.notes}\n                    onClose={this.notesClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogContent>\n                        <DialogTitle id=\"form-dialog-title\">\n                            Your Description\n                        </DialogTitle>\n                        {this.trial()}\n                    </DialogContent>\n                </Dialog>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    // console.log(state);\n    return {\n        list: state.todos,\n        commentData: state.comment,\n        replyData: state.reply,\n        userFiles: state.files\n    };\n};\n\nconst mapDispatchToProps = () => {\n    return {\n        read,\n        comment,\n        reply,\n        files\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Todolist);\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodo } from \"../actions/todo\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\nimport { getJwt } from \"../components/helpers/jwt\";\nimport swal from \"sweetalert\";\n\nconst CssTextField = withStyles({\n    root: {\n        \"& label.Mui-focused\": {\n            color: \"green\"\n        },\n        \"& .MuiInput-underline:after\": {\n            borderBottomColor: \"green\"\n        },\n        \"& .MuiOutlinedInput-root\": {\n            \"& fieldset\": {\n                borderColor: \"red\"\n            },\n            \"&:hover fieldset\": {\n                borderColor: \"yellow\"\n            },\n            \"&.Mui-focused fieldset\": {\n                borderColor: \"green\"\n            }\n        }\n    }\n})(TextField);\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\"\n        // flexWrap: 'wrap',\n    },\n    margin1: {\n        margin: theme.spacing(1),\n        width: \"65%\"\n    },\n    margin2: {\n        margin: theme.spacing(1),\n        width: \"35%\"\n    }\n}));\n\nconst AddTodo = props => {\n    const classes = useStyles();\n    const [item, setItem] = React.useState(\"\");\n    const [emailValue, setEmailValue] = React.useState(\"\");\n    // const [clickedCardIndex, setClickedCardIndex] = React.useState(null);\n\n    const dispatch = useDispatch();\n\n    const addNew = e => {\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            if (item.length > 0 && emailValue.length > 0) {\n                axios\n                    .post(\"https://yogendra.ga:4000/post\", {\n                        item: item,\n                        done: false,\n                        token: getJwt(),\n                        assignedTo: emailValue,\n                        clickedCardIndex: props.clickedCard\n                    })\n                    .then(fullUserData => {\n                        // console.log('data uploaded!', fullUserData);\n                        if (fullUserData.data.length === 0) {\n                            swal(\n                                \"User Doesn't exist\",\n                                \"Please let him Signup!\",\n                                \"error\"\n                            );\n                            return;\n                        } else {\n                            // console.log('it\\'s still working! ');\n                            // setState({\n                            //     list: fullUserData.data\n                            // });\n                            // console.log(fullUserData);\n                            dispatch(\n                                addTodo(\n                                    fullUserData.data[\n                                        fullUserData.data.length - 1\n                                    ]\n                                )\n                            );\n                        }\n                        // console.log('is state', state.list);\n                    })\n                    .catch(err => console.log(\"myErr\", err));\n            } else {\n                // console.log('Kindly input some data');\n                swal(\"Error\", \"Please input some data\", \"info\");\n            }\n\n\n            setItem('');\n            setEmailValue('');\n            // console.log(input.value);\n            // dispatch(action('Add', input.value))\n        }\n    };\n\n    // ref={node => input=node}\n    return (\n        <div>\n            <form className={classes.root} onSubmit={addNew}>\n                <CssTextField\n                    className={classes.margin1}\n                    type=\"text\"\n                    id=\"outlined-full-width\"\n                    label=\"Add Todo\"\n                    style={{ margin: 8 }}\n                    fullWidth\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    onChange={e => setItem(e.target.value)}\n                    value={item}\n                    // fullWidth\n                    onKeyPress={addNew}\n                    autoFocus\n                />\n                <CssTextField\n                    // autoFocus\n                    type=\"email\"\n                    onChange={e => setEmailValue(e.target.value)}\n                    className={classes.margin2}\n                    label=\"Assign to\"\n                    value={emailValue}\n                    onKeyPress={addNew}\n                    variant=\"outlined\"\n                />\n            </form>\n        </div>\n    );\n};\n\nexport default AddTodo;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport { Redirect } from \"react-router-dom\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { useSelector } from \"react-redux\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport {red } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles(theme => ({\n    grow: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    avatar: {\n        backgroundColor: red[500]\n    },\n    title: {\n        display: \"none\",\n        [theme.breakpoints.up(\"sm\")]: {\n            display: \"block\"\n        }\n    },\n    inputRoot: {\n        color: \"inherit\"\n    },\n    sectionDesktop: {\n        display: \"none\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\"\n        }\n    },\n    sectionMobile: {\n        display: \"flex\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"none\"\n        }\n    },\n    list: {\n        width: 200\n    }\n}));\n\nexport default function PrimarySearchAppBar(props) {\n    const classes = useStyles();\n    const [profile, setProfile] = React.useState(false);\n    const selector = useSelector(state => state.todos);\n\n    const [state, setState] = React.useState({\n        left: false\n    });\n\n    let doneList = selector.filter(done => {\n        return done.done === 1 || done.done === true;\n    });\n\n    const toggleDrawer = (side, open) => event => {\n        if (\n            event.type === \"keydown\" &&\n            (event.key === \"Tab\" || event.key === \"Shift\")\n        ) {\n            return;\n        }\n\n        setState({ ...state, [side]: open });\n    };\n\n    const drawerListClick = index => {\n        if (index === 0) {\n            setProfile(true);\n        } else {\n            // console.log('logged out');\n            reactLocalStorage.remove(\"jwt\");\n            props.logout();\n        }\n    };\n\n    const sideList = side => (\n        <div\n            className={classes.list}\n            role=\"presentation\"\n            onClick={toggleDrawer(side, false)}\n            onKeyDown={toggleDrawer(side, false)}\n        >\n            <List>\n                {[\"Profile\", \"Log Out\"].map((text, index) => (\n                    <ListItem\n                        button\n                        key={text}\n                        onClick={() => drawerListClick(index)}\n                    >\n                        <ListItemIcon>\n                            {index % 2 === 0 ? (\n                                <AccountCircleIcon />\n                            ) : (\n                                <ExitToAppIcon />\n                            )}\n                        </ListItemIcon>\n                        <ListItemText primary={text} />\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    );\n\n    let openprofile = () => {\n        // console.log(\"openprofile function is called\");\n        setProfile(true);\n    };\n\n    if (profile) {\n        return <Redirect push to=\"/profile\" />;\n    }\n    return (\n        <div className={classes.grow}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={toggleDrawer(\"left\", true)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        TodoApp- Todos\n                    </Typography>\n                    <div className={classes.grow} />\n                    <div className={classes.sectionDesktop}>\n                        <Tooltip title=\"Done\">\n                            <IconButton aria-label=\"done icon\" color=\"inherit\">\n                                <Badge\n                                    badgeContent={doneList.length}\n                                    color=\"secondary\"\n                                >\n                                    <CheckCircleOutlineIcon />\n                                </Badge>\n                            </IconButton>\n                        </Tooltip>\n\n                        <Tooltip title=\"Pending\">\n                            <IconButton\n                                aria-label=\"pending icon\"\n                                color=\"inherit\"\n                            >\n                                <Badge\n                                    badgeContent={\n                                        selector.length - doneList.length\n                                    }\n                                    color=\"secondary\"\n                                >\n                                    <HighlightOffIcon />\n                                </Badge>\n                            </IconButton>\n                        </Tooltip>\n\n                        <Tooltip title=\"Profile\">\n                            <IconButton\n                                color=\"inherit\"\n                                aria-label=\"open drawer\"\n                                onClick={openprofile}\n                            >\n                                <Avatar className={classes.avatar} >{props.avatar[0]}</Avatar>\n                                {/* <AccountCircleIcon  /> */}\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </Toolbar>\n                <Drawer open={state.left} onClose={toggleDrawer(\"left\", false)}>\n                    {sideList(\"left\")}\n                </Drawer>\n            </AppBar>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport Todolist from \"./Todolist\";\nimport Addtodo from \"./AddTodo\";\nimport Stats from \"./Stats\";\nimport axios from \"axios\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport { Redirect } from \"react-router-dom\";\nimport { getJwt } from \"../components/helpers/jwt\";\n\nexport default class Todo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login: false,\n            redirectToProject: false,\n            clickedCardIndex: this.props.match.params.cardId,\n            avatar: \"\"\n        };\n    }\n\n    componentDidMount() {\n        // console.log('componentDidUpdate')\n        axios\n            .get(\"https://yogendra.ga:4000/get\", {\n                params: {\n                    token: getJwt(),\n                    clickedCardIndex: this.state.clickedCardIndex\n                }\n            })\n            .then(result => {\n                // console.log(\"willupdate\", result);\n                this.setState({\n                    avatar: result.data.avatar\n                });\n\n                if (result.data === \"token is not valid\") {\n                    reactLocalStorage.remove(\"jwt\", \"\");\n                    this.setState({\n                        login: true\n                    });\n                }\n            })\n            .catch(err => console.log(err));\n    }\n\n    logout = () => {\n        reactLocalStorage.remove(\"jwt\");\n        this.setState({\n            login: true\n        });\n    };\n\n    render() {\n        if (this.state.login) {\n            return <Redirect to=\"/login\" />;\n        }\n        if (this.state.redirectToProject) {\n            return <Redirect to=\"/project\" />;\n        }\n        // console.log(this.state.avatar);\n\n        return (\n            <div>\n                <Stats logout={this.logout} avatar={this.state.avatar} />\n\n                <Addtodo clickedCard={this.state.clickedCardIndex} />\n\n                <Todolist clickedCard={this.state.clickedCardIndex} />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from  'react-router-dom';\nimport LoginPage from './LoginPage';\nimport Card from '../containers/Card';\nimport SignupPage from './SignupPage';\nimport ForgotPass from './ForgotPass';\nimport ResetPass from './ResetPass';\nimport Profile from '../containers/Profile';\nimport Todo from '../containers/Todo';\n\nexport default class Main extends Component {\n    render() {\n        return (\n            <Router>\n                <Route path=\"/\" exact component={ LoginPage } />\n                <Route path=\"/login\" exact component={ LoginPage }/>\n                <Route path=\"/signup\" exact component={ SignupPage } />\n                <Route path=\"/profile\" exact component={ Profile } />\n                <Route path=\"/project\" exact component={ Card } />\n                <Route path=\"/forgotpass\" exact component={ ForgotPass } />\n                <Route path=\"/resetpass\" exact component={ ResetPass } />\n                <Route path=\"/todo/:cardId\" exact component={ Todo } />\n            </Router>\n        )\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport combineReducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\nimport Main from \"./components/Main\";\n// import { addTodo } from './actions';\n\nconst store = createStore(\n    combineReducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n// store.subscribe(() => console.log(store.getState()));\n// store.dispatch(addTodo('done'));\n\nReactDOM.render(\n    <Provider store={store}>\n        <Main />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}